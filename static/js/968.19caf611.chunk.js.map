{"version":3,"file":"static/js/968.19caf611.chunk.js","mappings":"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","sources":["../node_modules/nanoid/index.browser.js","components/QuestionForm/QuestionForm.jsx","components/App.jsx","pages/QuestionForm.js"],"sourcesContent":["export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n","import {useState} from \"react\";\nimport { getDatabase, ref, set } from \"firebase/database\";\nimport { nanoid } from 'nanoid'\n\nconst initial_state = {\n    question: \"\",\n    topic: \"\",\n    answer1: \"\",\n    answer2: \"\",\n    answer3: \"\",\n    answer4: \"\",\n    correctAnswer:\"\",\n}\nconst dataBase = getDatabase()\nfunction  QuestionForm  () {\n\n    const [questionForm, setQuestionForm] = useState(initial_state);\n\nfunction handleChangeForm  (event) {\n    const {name, value} = event.target;\n    console.log(name, value);\n    return setQuestionForm(questionForm=>({...questionForm, [name]:value}));\n}\n\nconst handleFormSubmit  = async(event) => {\n    event.preventDefault();\n    console.log(questionForm);\n    // додає питання до БД \n    const id = nanoid();\n      set(ref(dataBase, questionForm.topic+'/'+ id), {\n        ...questionForm, id\n      });\n\n    resetForm ();\n\n}\n\n\nfunction resetForm () {\n    setQuestionForm(initial_state)\n}\n      return(\n        <form onSubmit={handleFormSubmit}>\n            <label>Question\n                <input  \n                type=\"text\"   \n                name=\"question\"\n                value={questionForm.question}\n                onChange = {handleChangeForm}\n                required/>\n            </label>\n            <label>Topic of question\n                <select \n                name=\"topic\"\n                id =\"topic\"\n                value={questionForm.topic}\n                onChange = {handleChangeForm}\n                >\n                <option value=\"\">--Please choose an option--</option>\n                <option value=\"react\">React</option>\n                <option value=\"js\">JS</option>\n                <option value=\"html\">HTML</option>\n                <option value=\"css\">CSS</option>\n                </select>\n            </label>\n            <label>Answer option 1\n                <input \n                type=\"text\"\n                name=\"answer1\"\n                value={questionForm.answer1}\n                onChange = {handleChangeForm}\n                required/>\n            </label>\n            <label><input type=\"radio\" name=\"correctAnswer\" value=\"answer1\" id=\"answer1\" onChange={handleChangeForm}></input>Correct answer</label>\n            <label>Answer option 2\n                <input \n                type=\"text\"\n                name=\"answer2\"\n                value={questionForm.answer2}\n                onChange = {handleChangeForm}\n                required/>\n            </label>\n            <label><input type=\"radio\" name=\"correctAnswer\" value=\"answer2\" id=\"answer2\" onChange={handleChangeForm}></input> Correct answer</label>\n            <label>Answer option 3\n                <input \n                type=\"text\"\n                name=\"answer3\"\n                value={questionForm.answer3}\n                onChange = {handleChangeForm}\n                required/>\n            </label>\n            <label><input type=\"radio\" name=\"correctAnswer\" value=\"answer3\" id=\"answer3\" onChange={handleChangeForm}></input>Correct answer</label>\n            <label>Answer option 4\n                <input \n                type=\"text\"\n                name=\"answer4\"\n                value={questionForm.answer4}\n                onChange = {handleChangeForm}\n                required/>\n            </label>\n            <label><input type=\"radio\" name=\"correctAnswer\" value=\"answer4\" id=\"answer4\" onChange={handleChangeForm}></input>Correct answer</label>\n            <button type='submit'>Add question</button>\n        </form>)\n        \n    }\n\nexport default QuestionForm\n","import { useDispatch } from \"react-redux\";\nimport { useEffect } from \"react\";\n// import { fetchContacts } from \"redux/operations\";\nimport { refreshUser } from \"../redux/auth/operations\"\nimport QuestionForm from './QuestionForm/QuestionForm';\n\n\nexport default function App () {\nconst dispatch = useDispatch();\n\n    // useEffect(() => {\n    //   dispatch(fetchContacts());\n    // }, [dispatch]);\n\n    useEffect(() => {\n      dispatch(refreshUser());\n    }, [dispatch]);\n\n    return (\n      <div\n        style={{\n          display: 'flex',\n          minWidth: 555,\n          justifyContent: 'center',\n          alignItems: 'center',\n          fontSize: 20,\n          color: '#010101'\n        }}>\n  \n  <div className=\"list_section\">\n  <QuestionForm/>\n  </div>\n    </div>\n    )\n  }\n  ","\nimport App from '../components/App';\n\nexport default function Contacts () {\n  return (\n    <>\n      <App />\n    </>\n  );\n}"],"names":["nanoid","size","crypto","getRandomValues","Uint8Array","reduce","id","byte","toString","toUpperCase","initial_state","question","topic","answer1","answer2","answer3","answer4","correctAnswer","dataBase","getDatabase","useState","questionForm","setQuestionForm","handleChangeForm","event","target","name","value","console","log","handleFormSubmit","preventDefault","set","ref","onSubmit","type","onChange","required","App","dispatch","useDispatch","useEffect","refreshUser","style","display","minWidth","justifyContent","alignItems","fontSize","color","className","Contacts"],"sourceRoot":""}